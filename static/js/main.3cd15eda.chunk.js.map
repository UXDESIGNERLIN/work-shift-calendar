{"version":3,"sources":["component/Helpers/CalendarHelpers.js","component/calendar.js","App.js","serviceWorker.js","index.js"],"names":["daysInMonth","YYYY","MM","Date","getDate","renderShift","DD","dateSequence","i","getDateSequence","showShift","ScheduleCalendar","renderDate","e","miliseconds","parse","newDate","getFullYear","getMonth","content","date","view","className","onClickDay","this","tileContent","Component","App","useState","showSchedule","setShowSchedule","showDSchedule","target","id","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAAA,SAASA,EAAYC,EAAMC,GACzB,OAAO,IAAIC,KAAKF,EAAMC,EAAI,GAAGE,UAqB/B,SAASC,EAAYH,EAAII,EAAIL,GA0B3B,MAtBkB,CAChB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBArCJ,SAAyBC,EAAII,EAAIL,GAO/B,IANA,IAAIM,EAAe,EAMVC,EALWN,EAAK,EAKGM,EAAI,EAAGA,IACjCD,GAA8BP,EAAYC,EAAMO,GAElD,OAAOD,EAAeD,EAIHG,CAAgBP,EAAII,EAAIL,GAC/B,IA2BP,SAASS,EAAUR,EAAII,EAAIL,GAEhC,OADYI,EAAYH,EAAII,EAAIL,G,gBCdnBU,E,4MA7BbC,WAAa,SAAAC,GACX,IAAIC,EAAcX,KAAKY,MAAMF,GACzBG,EAAU,IAAIb,KAAKW,GACvB,GAA8B,OAA1BE,EAAQC,cASZ,OAPYP,EACVM,EAAQE,WAAa,EACrBF,EAAQZ,UACRY,EAAQC,gB,EAOZE,QAAU,gBAAGC,EAAH,EAAGA,KAAH,MACC,UADD,EAASC,MACG,2BAAI,EAAKT,WAAWQ,K,uDAGxC,OACE,yBAAKE,UAAU,sBACZ,IACD,kBAAC,IAAD,CAAUC,WAAYC,KAAKZ,WAAYa,YAAaD,KAAKL,e,GAzBlCO,aCgChBC,MAjCf,WAAgB,IAAD,EAC2BC,oBAAS,GADpC,mBACNC,EADM,KACQC,EADR,KAEPC,EAAgB,SAAAlB,GACJ,MAAhBA,EAAEmB,OAAOC,GAAaH,GAAgB,GAAQA,GAAgB,IAGhE,OACE,yBAAKR,UAAU,OACZ,IADH,uCAGE,yBAAKA,UAAU,qBACb,4BAAQA,UAAU,oBAAoBY,QAASH,GAA/C,KAGA,4BAAQT,UAAU,oBAAoBY,QAASH,GAA/C,KAGA,4BAAQT,UAAU,oBAAoBY,QAASH,GAA/C,KAGA,4BACET,UAAU,oBACVW,GAAG,IACHC,QAAS,SAAArB,GAAC,OAAIkB,EAAclB,KAH9B,MAQDgB,GAAgB,kBAAC,EAAD,QCrBHM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cd15eda.chunk.js","sourcesContent":["function daysInMonth(YYYY, MM) {\n  return new Date(YYYY, MM, 0).getDate();\n}\n\n/*function daysInYear() {\n  var previous = new Date(dt.getFullYear(), 0, 1);\n  console.log(\"pr\", previous);\n}*/\n\nfunction getDateSequence(MM, DD, YYYY) {\n  let dateSequence = 0;\n  let MonthsTillNow = MM - 1;\n  /* if (YYYY - 2020 > 0) {\n    let countingStart = new Date(2020, 0, 6);\n    let current = new Date();\n  }*/\n  for (let i = MonthsTillNow; i > 0; i--) {\n    dateSequence = dateSequence + daysInMonth(YYYY, i);\n  }\n  return dateSequence + DD;\n}\n\nfunction renderShift(MM, DD, YYYY) {\n  let dateSequence = getDateSequence(MM, DD, YYYY);\n  let round = 20;\n  let shift = dateSequence % round;\n  let shiftsArray = [\n    \"中班\",\n    \"中班\",\n    \"中班\",\n    \"中班\",\n    \"中班\",\n    \"休假\",\n    \"早班\",\n    \"早班\",\n    \"早班\",\n    \"早班\",\n    \"早班\",\n    \"休假\",\n    \"休假\",\n    \"晚班\",\n    \"晚班\",\n    \"晚班\",\n    \"晚班\",\n    \"晚班\",\n    \"休假\",\n    \"休假\"\n  ];\n  return shiftsArray[shift];\n}\n\nexport function showShift(MM, DD, YYYY) {\n  let shift = renderShift(MM, DD, YYYY);\n  return shift;\n}\n","import React, { Component } from \"react\";\nimport Calendar from \"react-calendar\";\nimport { showShift } from \"./Helpers/CalendarHelpers\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"./calendar.css\";\n\nclass ScheduleCalendar extends Component {\n  //answer = renderDate(Date.now());\n\n  renderDate = e => {\n    let miliseconds = Date.parse(e);\n    let newDate = new Date(miliseconds);\n    if (newDate.getFullYear() !== 2020) return;\n    //newDate = newDate.toString(\"MMM dd\");\n    let shift = showShift(\n      newDate.getMonth() + 1,\n      newDate.getDate(),\n      newDate.getFullYear()\n    );\n    //console.log(newDate.getMonth());\n\n    return shift;\n  };\n\n  content = ({ date, view }) =>\n    view === \"month\" && <p>{this.renderDate(date)}</p>;\n\n  render() {\n    return (\n      <div className=\"calendar-container\">\n        {\" \"}\n        <Calendar onClickDay={this.renderDate} tileContent={this.content} />\n      </div>\n    );\n  }\n}\n\n/**({ date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null */\nexport default ScheduleCalendar;\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport ScheduleCalendar from \"./component/calendar\";\n\nfunction App() {\n  const [showSchedule, setShowSchedule] = useState(false);\n  const showDSchedule = e => {\n    e.target.id === \"D\" ? setShowSchedule(true) : setShowSchedule(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {\" \"}\n      請選則你的股\n      <div className=\"buttons-container\">\n        <button className=\"department-button\" onClick={showDSchedule}>\n          A\n        </button>\n        <button className=\"department-button\" onClick={showDSchedule}>\n          B\n        </button>\n        <button className=\"department-button\" onClick={showDSchedule}>\n          C\n        </button>\n        <button\n          className=\"department-button\"\n          id=\"D\"\n          onClick={e => showDSchedule(e)}\n        >\n          D\n        </button>\n      </div>\n      {showSchedule && <ScheduleCalendar />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}