{"version":3,"sources":["component/Helpers/shiftsArray.js","component/Helpers/CalendarHelpers.js","component/Helpers/monthFormat.js","component/calendar.js","App.js","serviceWorker.js","index.js"],"names":["A","B","C","D","departments","renderShift","miliseconds","department","setDepartmentArray","convertMiliToDay","Date","start","moment","diff","dateDiff","showShift","monthArray","ScheduleCalendar","renderDate","e","parse","getFullYear","props","renderMonthName","newDate","getMonth","renderTileContent","date","view","renderTileClass","className","tileClassName","this","tileContent","calendarType","Component","App","useState","showSchedule","setShowSchedule","DepartmentSent","setSendDepartment","showDSchedule","target","id","console","log","setTimeout","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iUAAaA,EAAI,CACf,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBAGWC,EAAI,CACf,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBAGWC,EAAI,CACf,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBAGWC,EAAI,CACf,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gB,OCtFEC,EAAc,CAChBJ,EAAG,WACD,OAAOA,GAETC,EAAG,WACD,OAAOA,GAETC,EAAG,WACD,OAAOA,GAETC,EAAG,WACD,OAAOA,IAmCX,SAASE,EAAYC,EAAaC,GAShC,OAxCF,SAA4BA,GAC1B,OAAOH,EAAYG,KA+BDC,CAAmBD,GARvC,SAAkBD,GAChB,IAAIG,EAAmB,IAAIC,KAAKJ,GAC5BK,EAAQC,EAAO,cAEnB,OADUA,EAAOH,GACNI,KAAKF,EAAO,QAOJG,CAASR,GAChB,IAOP,SAASS,EAAUT,EAAaC,GAErC,OADYF,EAAYC,EAAaC,GC9DhC,IAAMS,EAAa,CACxB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,sBCiDaC,G,wNArDbC,WAAa,SAAAC,GACX,IAAIb,EAAcI,KAAKU,MAAMD,GAE7B,KADc,IAAIT,KAAKJ,GACXe,cAAgB,MAQ5B,OANYN,EACVT,EAEA,EAAKgB,MAAMf,a,EAMfgB,gBAAkB,SAAAJ,GAChB,IAAIb,EAAcI,KAAKU,MAAMD,GACzBK,EAAU,IAAId,KAAKJ,GACvB,OAAOU,EAAWQ,EAAQC,a,EAG5BC,kBAAoB,YAAqB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAE3B,MAAgB,UAATA,EACL,2BAAI,EAAKV,WAAWS,IAEX,SAATC,GAAmB,2BAAI,EAAKL,gBAAgBI,K,EAIhDE,gBAAkB,gBAAGF,EAAH,EAAGA,KAAH,MACP,UADO,EAASC,MACqB,iBAA1B,EAAKV,WAAWS,GAChC,uBACA,2B,uDAGJ,OACE,yBAAKG,UAAU,sBACZ,IACD,kBAAC,IAAD,CAEEC,cAAeC,KAAKH,gBACpBI,YAAaD,KAAKN,kBAClBQ,aAAa,Y,GA3CQC,cCqDhBC,MAvDf,WAAe,MAe2BC,oBAAS,GAfpC,mBAeNC,EAfM,KAeQC,EAfR,OAgB+BF,qBAhB/B,mBAgBNG,EAhBM,KAgBUC,EAhBV,KAiBPC,EAAgB,SAAAvB,GACpBqB,IAAmBrB,EAAEwB,OAAOC,IAAML,GAAgB,GAClDM,QAAQC,IAAI,OAAQR,GACpBG,EAAkBtB,EAAEwB,OAAOC,IAC3BG,YAAW,WACTR,GAAgB,KACf,IAKL,OACE,yBAAKT,UAAU,OACZ,IACD,oEACA,yBAAKA,UAAU,qBACb,4BAAQA,UAAU,oBAAoBc,GAAG,IAAII,QAASN,GAAtD,KAGA,4BAAQZ,UAAU,oBAAoBc,GAAG,IAAII,QAASN,GAAtD,KAGA,4BAAQZ,UAAU,oBAAoBc,GAAG,IAAII,QAASN,GAAtD,KAGA,4BACEZ,UAAU,oBACVc,GAAG,IACHI,QAAS,SAAA7B,GAAC,OAAIuB,EAAcvB,KAH9B,MAQDmB,GAAgB,kBAAC,EAAD,CAAkB/B,WAAYiC,MC3C/CS,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BvB,QAAQC,IACN,iHAKEW,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBjB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL3B,QAAQ2B,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAIzE,GADkB,IAAIoB,IAAIC,uBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,uBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL1B,QAAQC,IACN,oEAvFA+C,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjChB,QAAQC,IACN,iHAMJS,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.abd98713.chunk.js","sourcesContent":["export const A = [\n  \"休假\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"休假\",\n  \"休假\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"休假\",\n  \"休假\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\"\n];\n\nexport const B = [\n  \"早班\",\n  \"休假\",\n  \"休假\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"休假\",\n  \"休假\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"休假\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\"\n];\n\nexport const C = [\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"休假\",\n  \"休假\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"休假\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"休假\",\n  \"休假\",\n  \"晚班\",\n  \"晚班\"\n];\n\nexport const D = [\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"中班\",\n  \"休假\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"早班\",\n  \"休假\",\n  \"休假\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"晚班\",\n  \"休假\",\n  \"休假\"\n];\n","import { A, B, C, D } from \"./shiftsArray\";\nimport * as moment from \"moment\";\n\nlet departments = {\n  A: () => {\n    return A;\n  },\n  B: () => {\n    return B;\n  },\n  C: () => {\n    return C;\n  },\n  D: () => {\n    return D;\n  }\n};\n\nfunction setDepartmentArray(department) {\n  return departments[department]();\n}\n\nfunction daysInMonth(YYYY, MM) {\n  return new Date(YYYY, MM, 0).getDate();\n}\n\n/*function daysInYear() {\n  var previous = new Date(dt.getFullYear(), 0, 1);\n  console.log(\"pr\", previous);\n}*/\n\nfunction getDateSequence(MM, DD, YYYY) {\n  let lastSpringHoliday = 5;\n  let dateSequence = 0;\n  let MonthsTillNow = MM - 1;\n\n  for (let i = MonthsTillNow; i > 0; i--) {\n    dateSequence = dateSequence + daysInMonth(YYYY, i);\n  }\n  return dateSequence + DD - lastSpringHoliday;\n}\n\nfunction dateDiff(miliseconds) {\n  let convertMiliToDay = new Date(miliseconds);\n  let start = moment(\"2020-01-06\");\n  let end = moment(convertMiliToDay);\n  return end.diff(start, \"days\");\n}\n\nfunction renderShift(miliseconds, department) {\n  let shiftsArray = setDepartmentArray(department);\n\n  //let dateSequence = getDateSequence(MM, DD, YYYY) - 1;\n  let numberOfDays = dateDiff(miliseconds);\n  let round = 20;\n\n  let shift = numberOfDays % round;\n\n  return shiftsArray[shift];\n}\n\nexport function showShift(miliseconds, department) {\n  let shift = renderShift(miliseconds, department);\n  return shift;\n}\n","export const monthArray = [\n  \"一月\",\n  \"二月\",\n  \"三月\",\n  \"四月\",\n  \"五月\",\n  \"六月\",\n  \"七月\",\n  \"八月\",\n  \"九月\",\n  \"十月\",\n  \"十一月\",\n  \"十二月\"\n];\n","import React, { Component } from \"react\";\nimport Calendar from \"react-calendar\";\nimport { showShift } from \"./Helpers/CalendarHelpers\";\nimport { monthArray } from \"./Helpers/monthFormat\";\nimport \"react-calendar/dist/Calendar.css\";\nimport \"./calendar.css\";\n\nclass ScheduleCalendar extends Component {\n  renderDate = e => {\n    let miliseconds = Date.parse(e);\n    let newDate = new Date(miliseconds);\n    if (newDate.getFullYear() < 2020) return;\n\n    let shift = showShift(\n      miliseconds,\n\n      this.props.department\n    );\n\n    return shift;\n  };\n\n  renderMonthName = e => {\n    let miliseconds = Date.parse(e);\n    let newDate = new Date(miliseconds);\n    return monthArray[newDate.getMonth()];\n  };\n\n  renderTileContent = ({ date, view }) => {\n    //  view === \"year\" && <p>1月</p>;\n    return view === \"month\" ? (\n      <p>{this.renderDate(date)}</p>\n    ) : (\n      view === \"year\" && <p>{this.renderMonthName(date)}</p>\n    );\n  };\n\n  renderTileClass = ({ date, view }) =>\n    view === \"month\" && this.renderDate(date) === \"休假\"\n      ? \"holidayCalendarStyle\"\n      : \"nonHolidayCalendarStyle\";\n\n  render() {\n    return (\n      <div className=\"calendar-container\">\n        {\" \"}\n        <Calendar\n          //onClickDay={this.renderDate}\n          tileClassName={this.renderTileClass}\n          tileContent={this.renderTileContent}\n          calendarType=\"US\"\n          // formatMonth={this.renderMonthName}\n        />\n      </div>\n    );\n  }\n}\n\n/**Function: ({ date, view }) => view === 'month' && date.getDay() === 3 ? 'saturday' : null */\n\n/**({ date, view }) => view === 'month' && date.getDay() === 0 ? <p>It's Sunday!</p> : null */\nexport default ScheduleCalendar;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport ScheduleCalendar from \"./component/calendar\";\n\nfunction App() {\n  /* useEffect(() => {\n    let deferredPrompt;\n    window.addEventListener(\"beforeinstallprompt\", e => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n\n      // Stash the event so it can be triggered later.\n      deferredPrompt = e;\n      // Update UI notify the user they can install the PWA\n\n      showInstallPromotion();\n    });\n  });*/\n  //const [A2HSButton, setA2HSButton] = useState(false);\n  const [showSchedule, setShowSchedule] = useState(false);\n  const [DepartmentSent, setSendDepartment] = useState();\n  const showDSchedule = e => {\n    DepartmentSent !== e.target.id && setShowSchedule(false);\n    console.log(\"show\", showSchedule);\n    setSendDepartment(e.target.id);\n    setTimeout(() => {\n      setShowSchedule(true);\n    }, 0);\n\n    //e.target.id === \"D\" ? setShowSchedule(true) : setShowSchedule(false);\n  };\n\n  return (\n    <div className=\"App\">\n      {\" \"}\n      <h2>請選則你的股</h2>\n      <div className=\"buttons-container\">\n        <button className=\"department-button\" id=\"A\" onClick={showDSchedule}>\n          A\n        </button>\n        <button className=\"department-button\" id=\"B\" onClick={showDSchedule}>\n          B\n        </button>\n        <button className=\"department-button\" id=\"C\" onClick={showDSchedule}>\n          C\n        </button>\n        <button\n          className=\"department-button\"\n          id=\"D\"\n          onClick={e => showDSchedule(e)}\n        >\n          D\n        </button>\n      </div>\n      {showSchedule && <ScheduleCalendar department={DepartmentSent} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.register();\n"],"sourceRoot":""}